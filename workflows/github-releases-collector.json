{
  "name": "GitHub Vue/Nuxt Releases Collector (Final Working)",
  "nodes": [
    {
      "parameters": {},
      "id": "f8a8c0e0-7e7e-4b7e-9c1c-7f7e7e7e7e7e",
      "name": "Manual Trigger",
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [240, 300]
    },
    {
      "parameters": {
        "url": "https://api.github.com/repos/vuejs/core/releases",
        "options": {
          "queryParameters": {
            "parameters": [
              {"name": "per_page", "value": "10"}
            ]
          },
          "headers": {
            "parameters": [
              {"name": "Accept", "value": "application/vnd.github.v3+json"},
              {"name": "User-Agent", "value": "Vue-Nuxt-News-Collector"}
            ]
          }
        }
      },
      "id": "a1b2c3d4-e5f6-7890-abcd-ef1234567890",
      "name": "Get Vue.js Releases",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [460, 300]
    },
    {
      "parameters": {
        "url": "https://api.github.com/repos/nuxt/nuxt/releases",
        "options": {
          "queryParameters": {
            "parameters": [
              {"name": "per_page", "value": "10"}
            ]
          },
          "headers": {
            "parameters": [
              {"name": "Accept", "value": "application/vnd.github.v3+json"},
              {"name": "User-Agent", "value": "Vue-Nuxt-News-Collector"}
            ]
          }
        }
      },
      "id": "b2c3d4e5-f6g7-8901-bcde-f23456789012",
      "name": "Get Nuxt.js Releases",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [460, 480]
    },
    {
      "parameters": {
        "mode": "append"
      },
      "id": "c3d4e5f6-g7h8-9012-cdef-345678901234",
      "name": "Combine Releases",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 2.1,
      "position": [680, 390]
    },
    {
      "parameters": {
        "jsCode": "// Simple processing: handle both array and single releases\nconst processedReleases = [];\n\n// Get all inputs\nconst inputs = $input.all();\n\nfor (const item of inputs) {\n  // Handle both single release objects and arrays of releases\n  const releases = Array.isArray(item.json) ? item.json : [item.json];\n  \n  for (const release of releases) {\n    if (!release || !release.html_url) continue;\n    \n    const isVue = release.html_url.includes('/vuejs/');\n    const isNuxt = release.html_url.includes('/nuxt/');\n    \n    processedReleases.push({\n      framework: isVue ? 'Vue.js' : isNuxt ? 'Nuxt.js' : 'Unknown',\n      version: release.tag_name,\n      name: release.name || release.tag_name,\n      description: release.body ? release.body.substring(0, 500) + '...' : 'No description available',\n      published_date: release.published_at,\n      html_url: release.html_url,\n      draft: release.draft,\n      prerelease: release.prerelease,\n      author: release.author ? release.author.login : 'Unknown',\n      repository: isVue ? 'vuejs/core' : isNuxt ? 'nuxt/nuxt' : 'unknown',\n      published_date_formatted: new Date(release.published_at).toLocaleDateString('en-US', {\n        year: 'numeric', month: 'long', day: 'numeric'\n      }),\n      version_type: release.prerelease ? 'Prerelease' : release.draft ? 'Draft' : 'Stable'\n    });\n  }\n}\n\n// Sort by date (newest first)\nprocessedReleases.sort((a, b) => new Date(b.published_date) - new Date(a.published_date));\n\nreturn processedReleases.map(release => ({ json: release }));"
      },
      "id": "d4e5f6g7-h8i9-0123-defg-456789012345",
      "name": "Process Release Data",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [900, 390]
    },
    {
      "parameters": {
        "jsCode": "// Create formatted outputs for Slack and Obsidian\nconst releases = $input.all();\nconst vueReleases = releases.filter(r => r.json.framework === 'Vue.js');\nconst nuxtReleases = releases.filter(r => r.json.framework === 'Nuxt.js');\n\nconst currentWeek = new Date();\nconst oneWeekAgo = new Date(currentWeek.getTime() - (7 * 24 * 60 * 60 * 1000));\n\n// Filter recent releases\nconst recentReleases = releases.filter(r => new Date(r.json.published_date) > oneWeekAgo);\n\n// Create Slack message\nconst slackMessage = {\n  text: '🚀 Weekly Vue.js & Nuxt.js Releases Summary',\n  blocks: [\n    {\n      type: 'header',\n      text: {\n        type: 'plain_text',\n        text: '🚀 Vue.js & Nuxt.js Weekly Release Summary'\n      }\n    },\n    {\n      type: 'section',\n      text: {\n        type: 'mrkdwn',\n        text: `📊 *Summary for ${currentWeek.toLocaleDateString('en-US')}*\\n• Total releases checked: ${releases.length}\\n• Vue.js releases: ${vueReleases.length}\\n• Nuxt.js releases: ${nuxtReleases.length}\\n• Recent releases (last 7 days): ${recentReleases.length}`\n      }\n    }\n  ]\n};\n\n// Add recent releases\nif (recentReleases.length > 0) {\n  slackMessage.blocks.push({\n    type: 'section',\n    text: { type: 'mrkdwn', text: '*🆕 Recent Releases:*' }\n  });\n  \n  recentReleases.slice(0, 5).forEach(r => {\n    const release = r.json;\n    const emoji = release.framework === 'Vue.js' ? '💚' : '🟢';\n    slackMessage.blocks.push({\n      type: 'section',\n      text: {\n        type: 'mrkdwn',\n        text: `${emoji} *${release.framework} ${release.version}*\\n📅 ${release.published_date_formatted}\\n🔗 <${release.html_url}|View Release>`\n      }\n    });\n  });\n} else {\n  slackMessage.blocks.push({\n    type: 'section',\n    text: { type: 'mrkdwn', text: '🔍 No new releases in the last week.' }\n  });\n}\n\n// Add latest versions\nif (vueReleases.length > 0 || nuxtReleases.length > 0) {\n  let latestText = '*📋 Current Latest Versions:*\\n';\n  if (vueReleases.length > 0) {\n    const latest = vueReleases[0].json;\n    latestText += `💚 Vue.js: ${latest.version} (${latest.published_date_formatted})\\n`;\n  }\n  if (nuxtReleases.length > 0) {\n    const latest = nuxtReleases[0].json;\n    latestText += `🟢 Nuxt.js: ${latest.version} (${latest.published_date_formatted})\\n`;\n  }\n  slackMessage.blocks.push({ type: 'section', text: { type: 'mrkdwn', text: latestText } });\n}\n\n// Create summary\nconst summary = {\n  success: true,\n  message: \"Vue & Nuxt releases collected and formatted successfully!\",\n  total_releases: releases.length,\n  vue_releases: vueReleases.length,\n  nuxt_releases: nuxtReleases.length,\n  recent_releases: recentReleases.length,\n  latest_vue: vueReleases.length > 0 ? vueReleases[0].json : null,\n  latest_nuxt: nuxtReleases.length > 0 ? nuxtReleases[0].json : null,\n  collection_timestamp: new Date().toISOString(),\n  slack_message: slackMessage,\n  releases: releases.map(r => r.json)\n};\n\nreturn [{ json: summary }];"
      },
      "id": "e5f6g7h8-i9j0-1234-efgh-567890123456",
      "name": "Format for Output",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1120, 390]
    }
  ],
  "connections": {
    "Manual Trigger": {
      "main": [[
        {"node": "Get Vue.js Releases", "type": "main", "index": 0},
        {"node": "Get Nuxt.js Releases", "type": "main", "index": 0}
      ]]
    },
    "Get Vue.js Releases": {
      "main": [[
        {"node": "Combine Releases", "type": "main", "index": 0}
      ]]
    },
    "Get Nuxt.js Releases": {
      "main": [[
        {"node": "Combine Releases", "type": "main", "index": 1}
      ]]
    },
    "Combine Releases": {
      "main": [[
        {"node": "Process Release Data", "type": "main", "index": 0}
      ]]
    },
    "Process Release Data": {
      "main": [[
        {"node": "Format for Output", "type": "main", "index": 0}
      ]]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "4.0.0",
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "id": "github-releases-collector-final-working",
  "tags": [
    {
      "createdAt": "2024-09-30T09:00:00.000Z",
      "updatedAt": "2024-09-30T09:00:00.000Z",
      "id": "vue-nuxt",
      "name": "vue-nuxt"
    }
  ]
}